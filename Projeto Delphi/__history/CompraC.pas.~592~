unit CompraC;

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs, StdCtrls, ExtCtrls, DB, DBClient, Grids, DBGrids, Buttons, Mask,
  rxToolEdit, DBCtrls, rxCurrEdit;

type
  TTCompraC = class(TForm)
    Panel1: TPanel;
    Panel2: TPanel;
    gbProd: TGroupBox;
    edCodPC: TEdit;
    edDescPC: TEdit;
    edQuantPC: TEdit;
    Panel3: TPanel;
    Label1: TLabel;
    gbClien: TGroupBox;
    btnPesquisarC: TBitBtn;
    edNomeCC: TEdit;
    Panel4: TPanel;
    DBGrid1: TDBGrid;
    dsCompra: TDataSource;
    cdsCompra: TClientDataSet;
    cdsCompraCOD_PRODUTO: TIntegerField;
    cdsCompraDESCRICAO: TStringField;
    cdsCompraQUANTIDADE: TIntegerField;
    cdsCompraPRECO: TFloatField;
    cdsCompraACAO: TStringField;
    deCompra: TDateEdit;
    btnLimparC: TBitBtn;
    Panel5: TPanel;
    edCodCC: TEdit;
    btnPesquisaP: TBitBtn;
    btnLimparP: TBitBtn;
    Label2: TLabel;
    Label3: TLabel;
    Label4: TLabel;
    Label5: TLabel;
    Label6: TLabel;
    Label7: TLabel;
    btnExcluir: TBitBtn;
    btnAdicionar: TBitBtn;
    Label8: TLabel;
    Label9: TLabel;
    lblContaRegistro: TLabel;
    btnSalvar: TBitBtn;
    btnCancelar: TBitBtn;
    lblAcao: TLabel;
    edPrecoPC: TMaskEdit;
    cdsCompraVALORTOTAL: TCurrencyField;
    MostraTotal: TCurrencyEdit;
    procedure btnCancelarClick(Sender: TObject);
    procedure FormKeyDown(Sender: TObject; var Key: Word; Shift: TShiftState);
    procedure btnPesquisarCClick(Sender: TObject);
    procedure btnLimparCClick(Sender: TObject);
    procedure edCodCCKeyPress(Sender: TObject; var Key: Char);
    procedure btnPesquisaPClick(Sender: TObject);
    procedure btnLimparPClick(Sender: TObject);
    procedure edCodPCKeyPress(Sender: TObject; var Key: Char);
    procedure edQuantPCClick(Sender: TObject);
    procedure edQuantPCKeyPress(Sender: TObject; var Key: Char);
    procedure edQuantPCChange(Sender: TObject);
    procedure btnAdicionarClick(Sender: TObject);
    procedure FormCreate(Sender: TObject);
    procedure DBGrid1CellClick(Column: TColumn);
    procedure FormClose(Sender: TObject; var Action: TCloseAction);
    procedure btnExcluirClick(Sender: TObject);
  private
    { Private declarations }
    Valor: Double;
    ProdutoEditado: Double;
    procedure DBGrid1DblClick(Sender: TObject);
  public
    { Public declarations }
    procedure ChamaTelaC;
  end;

var
  TCompraC: TTCompraC;

implementation

uses
  Cliente, DMPrincipal, Funcoes, Funcoesdb, Produto;

{$R *.dfm}

procedure TTCompraC.btnLimparCClick(Sender: TObject);
begin
  edCodCC.Clear;
  edNomeCC.Clear;

  if (edCodPC.Text <> '') and (edDescPC.Text <> '') then
  begin
    edCodPC.Clear;
    edDescPC.Clear;
    edPrecoPC.Clear;
    edQuantPC.Clear;
    btnAdicionar.Enabled := False;
    btnLimparP.Enabled := False;
  end;

  if cdsCompra.Active then
  begin
    cdsCompra.EmptyDataSet;
    lblContaRegistro.Caption := IntToStr(cdsCompra.RecordCount);
  end;

  btnLimparC.Enabled := False;

  edCodCC.SetFocus;
end;

procedure TTCompraC.btnLimparPClick(Sender: TObject);
begin
  edCodPC.Clear;
  edDescPC.Clear;
  edPrecoPC.Clear;
  edQuantPC.Clear;
  btnLimparP.Enabled := False;
end;

procedure TTCompraC.btnPesquisaPClick(Sender: TObject);
var
  Produto: string;
begin
  if not ValidarData(deCompra.Text) then
  begin
    EnviaMensagem('É preciso selecionar a data de compra antes de inserir um Produto!', 'Informação', mtInformation, [mbOK]);
    if deCompra.CanFocus then
      deCompra.SetFocus;
    Exit;
  end
  else if Empty(edCodCC.Text) and Empty(edNomeCC.Text) then
  begin
    EnviaMensagem('É preciso selecionar um Cliente antes de adicionar um produto!', 'Informação', mtInformation, [mbOK]);
    if edCodCC.CanFocus then
      edCodCC.SetFocus;
    Exit;
  end
  else
    Produto := TProduto.TranProduto('T');
  if Produto <> '' then
  begin
    with TDMPrincipal.qAux do
    begin
      Close;
      SQL.Clear;
      SQL.Add('SELECT COD_PRODUTO,DESCRICAO,PRECO');
      SQL.Add('FROM PRODUTO');
      SQL.Add('WHERE COD_PRODUTO = ' + Produto);
      Open;
      if not IsEmpty then
      begin
        edCodPC.Text := FieldByName('COD_PRODUTO').AsString;
        edDescPC.Text := FieldByName('DESCRICAO').AsString;
        edPrecoPC.Text := FieldByName('PRECO').AsString;
        btnLimparP.Enabled := True;

        TFloatField(TDMPrincipal.qAux.FieldByName('PRECO')).currency := true;

        if edQuantPC.CanFocus then
          edQuantPC.SetFocus;
      end
      else
      begin
        EnviaMensagem('Não há registros no sistema, verifique a informação digitada!', 'Informação', mtInformation, [mbOK]);
        btnLimparP.Click;
      end;
    end;
  end;
end;

procedure TTCompraC.btnPesquisarCClick(Sender: TObject);
var
  Cliente: string;
begin
  if not ValidarData(deCompra.Text) then
  begin
    EnviaMensagem('É preciso selecionar a data de compra antes de inserir um Cliente!', 'Informação', mtInformation, [mbOK]);
    if deCompra.CanFocus then
      deCompra.SetFocus;
  end
  else
  begin
    Cliente := TCliente.TransferirCliente('T');
    if Cliente <> '' then
    begin
      with TDMPrincipal.qAux do
      begin
        Close;
        SQL.Clear;
        SQL.Add('SELECT COD_CLIENTE,NOME');
        SQL.Add('FROM CLIENTE');
        sql.Add('WHERE COD_CLIENTE = ' + Cliente);
        Open;
        if not IsEmpty then
        begin
          edCodCC.Text := FieldByName('COD_CLIENTE').AsString;
          edNomeCC.Text := FieldByName('NOME').AsString;
          btnLimparC.Enabled := True;

          if btnPesquisaP.CanFocus then
            btnPesquisaP.SetFocus;
        end
        else
        begin
          EnviaMensagem('Não foi possível transferir o Cliente', 'Informação', mtInformation, [mbOK]);
          btnLimparC.Click;
        end;
      end;
    end;
  end;
end;

//procedure TTCompraC.cdsCompraCalcFields(DataSet: TDataSet);
//begin
//  with cdsCompra do
//  begin
//    FieldByName('VALORTOTAL').Value := FieldByName('PRECO').Value * FieldByName('QUANTIDADE').Value;
//  end;
//end;

procedure TTCompraC.btnAdicionarClick(Sender: TObject);
var
  aux: Double;
begin
  aux := 0;
  with cdsCompra do
  begin
    if lblAcao.Caption = '' then
    begin
      if cdsCompra.Locate('COD_PRODUTO', edCodPC.Text, []) then
      begin
        EnviaMensagem('Este produto já foi adicionado!' + #13 + 'Clique 2 vezes sobre o mesmo para Editar!', 'Informação', mtInformation, [mbOk]);
        btnLimparP.Click;
        if edCodPC.CanFocus then
          edCodPC.SetFocus;
        Exit;
      end
      else
      begin
        First;
        Append;
        FieldByName('COD_PRODUTO').Value := edCodPC.Text;
        FieldByName('DESCRICAO').Value := edDescPC.Text;
        FieldByName('PRECO').Value := edPrecoPC.Text;
        FieldByName('QUANTIDADE').Value := edQuantPC.Text;

        FieldByName('VALORTOTAL').AsFloat := StrToFloat(edPrecoPC.Text) * StrToInt(edQuantPC.Text);

        FieldByName('ACAO').Value := 'I';
        Post;

        aux := cdsCompra.FieldByName('VALORTOTAL').AsFloat;

        TFloatField(cdsCompra.FieldByName('PRECO')).currency := true;

        lblContaRegistro.Caption := IntToStr(cdsCompra.RecordCount);

        btnLimparP.Click;
        if edCodPC.CanFocus then
          edCodPC.SetFocus;

      end;
    end
    else if lblAcao.Caption = 'E' then
    begin
      Edit;
      FieldByName('COD_PRODUTO').Value := edCodPC.Text;
      FieldByName('DESCRICAO').Value := edDescPC.Text;
      FieldByName('PRECO').Value := edPrecoPC.Text;
      FieldByName('QUANTIDADE').Value := edQuantPC.Text;
      FieldByName('VALORTOTAL').AsFloat := StrToFloat(edPrecoPC.Text) * StrToInt(edQuantPC.Text);

      lblAcao.Caption := '';
      Post;

      Valor := Valor - ProdutoEditado;

      aux := cdsCompra.FieldByName('VALORTOTAL').AsFloat;

      btnLimparP.Click;
      edCodPC.Enabled := True;
      if edCodPC.CanFocus then
        edCodPC.SetFocus;
    end;
  end;

  Valor := Valor + aux;
  MostraTotal.Text := FloatToStr(Valor);

end;

procedure TTCompraC.btnCancelarClick(Sender: TObject);
begin
  TCompraC.Close;
end;

procedure TTCompraC.btnExcluirClick(Sender: TObject);
var aux: Double;
begin
  if cdsCompra.RecordCount = 0 then
  begin
    EnviaMensagem('É preciso selecionar um registro para excluir!', 'Informação', mtInformation, [mbOK]);
    Exit;
  end
  else
  begin
    aux := cdsCompra.FieldByName('VALORTOTAL').AsFloat;
    cdsCompra.Delete;
  end;
  Valor := Valor - aux;
  MostraTotal.Text := FloatToStr(Valor);
end;

procedure TTCompraC.ChamaTelaC;
begin
  TCompraC := TTCompraC.Create(Application);
  with TCompraC do
  begin
    ShowModal;
  end;
  FreeAndNil(TCompraC);
end;

procedure TTCompraC.DBGrid1CellClick(Column: TColumn);
begin
  if lblAcao.Caption <> 'E' then
    btnExcluir.Enabled := True;
end;

procedure TTCompraC.DBGrid1DblClick(Sender: TObject);
begin
  ProdutoEditado := 0;
  with cdsCompra do
  begin
    edCodPC.Text := FieldByName('COD_PRODUTO').AsString;
    edDescPC.Text := FieldByName('DESCRICAO').AsString;
    edPrecoPC.Text := FieldByName('PRECO').AsString;
    edQuantPC.Text := FieldByName('QUANTIDADE').AsString;
    lblAcao.Caption := 'E';

    ProdutoEditado := StrToFloat(edPrecoPC.Text) * StrToInt(edQuantPC.Text);

    if btnExcluir.Enabled = True then
      btnExcluir.Enabled := False;

    if edQuantPC.CanFocus then
      edQuantPC.SetFocus;

    edCodPC.Enabled := False;
  end;
end;

procedure TTCompraC.edCodCCKeyPress(Sender: TObject; var Key: Char);
begin
  if (Key = #13) and not Empty(edCodCC.Text) then
  begin
    if edCodCC.Text <> '*' then
    begin
      with TDMPrincipal.qAux do
      begin
        Close;
        SQL.Clear;
        SQL.Add('SELECT COD_CLIENTE,NOME');
        SQL.Add('FROM CLIENTE');
        SQL.Add('WHERE COD_CLIENTE = ' + edCodCC.Text);
        Open;
        if not IsEmpty then
        begin
          edCodCC.Text := FieldByName('COD_CLIENTE').AsString;
          edNomeCC.Text := FieldByName('NOME').AsString;
          btnLimparC.Enabled := True;

          if edCodPC.CanFocus then
            edCodPC.SetFocus;
        end
        else
        begin
          EnviaMensagem('Não há registros no sistema, verifique a informação digitada!', 'Informação', mtInformation, [mbOK]);
          btnLimparC.Click;
          Exit;
        end;
      end;
    end
    else
    begin
      EnviaMensagem('Não é possível pesquisar por *.' + #13 + 'Utilize apenas números!', 'Informação', mtInformation, [mbOK]);
      btnLimparC.Click;
      Exit;
    end;
  end;
end;

procedure TTCompraC.edCodPCKeyPress(Sender: TObject; var Key: Char);
begin
  if (Key = #13) and not Empty(edCodPC.Text) then
  begin
    if edCodPC.Text <> '*' then
    begin
      if Empty(edCodCC.Text) and (Empty(edNomeCC.Text)) then
      begin
        EnviaMensagem('É preciso selecionar um Cliente antes de adicionar um produto!', 'Informação', mtInformation, [mbOK]);
        btnLimparP.Click;
        if edCodCC.CanFocus then
          edCodCC.SetFocus;
        Exit;
      end
      else
      begin
        with TDMPrincipal.qAux do
        begin
          Close;
          SQL.Clear;
          SQL.Add('SELECT COD_PRODUTO,DESCRICAO,PRECO');
          SQL.Add('FROM PRODUTO');
          SQL.Add('WHERE COD_PRODUTO = ' + edCodPC.Text);
          Open;
          if not IsEmpty then
          begin
            edCodPC.Text := FieldByName('COD_PRODUTO').AsString;
            edDescPC.Text := FieldByName('DESCRICAO').AsString;
            edPrecoPC.Text := FieldByName('PRECO').AsString;
            btnLimparP.Enabled := True;

            TFloatField(TDMPrincipal.qAux.FieldByName('PRECO')).currency := true;

            if edQuantPC.CanFocus then
              edQuantPC.SetFocus;
          end
          else
          begin
            EnviaMensagem('Não há registros no sistema, verifique a informação digitada!', 'Informação', mtInformation, [mbOK]);
            btnLimparP.Click;
            Exit;
          end;
        end;
      end;
    end
    else
    begin
      EnviaMensagem('Não é possível pesquisar por *.' + #13 + 'Utilize apenas números!', 'Informação', mtInformation, [mbOK]);
      btnLimparP.Click;
      Exit;
    end;
  end;
end;

procedure TTCompraC.edQuantPCChange(Sender: TObject);
begin
  if (edCodPC.Text <> '') and (edDescPC.Text <> '') then
  begin
    if edQuantPC.Text <> '' then
      btnAdicionar.Enabled := True;
  end
  else
    btnAdicionar.Enabled := False;
end;

procedure TTCompraC.edQuantPCClick(Sender: TObject);
begin
  if Empty(edCodPC.Text) and Empty(edDescPC.Text) then
  begin
    EnviaMensagem('É preciso selecionar um produto antes de inserir quantidade!', 'Informação', mtInformation, [mbOK]);
    if edCodPC.CanFocus then
      edCodPC.SetFocus;
    Exit;
  end;
end;

procedure TTCompraC.edQuantPCKeyPress(Sender: TObject; var Key: Char);
begin
  if Empty(edCodPC.Text) and Empty(edDescPC.Text) then
  begin
    EnviaMensagem('É preciso selecionar um produto antes de inserir quantidade!', 'Informação', mtInformation, [mbOK]);
    edQuantPC.Clear;
    if edCodPC.CanFocus then
      edCodPC.SetFocus;
    Exit;
  end
  else
  begin
    if (Key = #13) then
    begin
      if (edQuantPC.Text > '0') and (edQuantPC.Text <> '') then
      begin
        if (btnAdicionar.Enabled) and (btnAdicionar.Visible) then
          btnAdicionar.Click;
      end
      else
      begin
        EnviaMensagem('A quantidade mínima deve ser 1', 'Informação', mtInformation, [mbOK]);
        edQuantPC.Clear;
        btnAdicionar.Enabled := False;
        Exit;
      end;
    end;
  end;
end;

procedure TTCompraC.FormClose(Sender: TObject; var Action: TCloseAction);
begin
  FreeAndNil(cdsCompra);
end;

procedure TTCompraC.FormCreate(Sender: TObject);
begin
  cdsCompra.CreateDataSet;

  deCompra.Date := Date();

  DBGrid1.ControlStyle := DBGrid1.ControlStyle + [csClickEvents];
  TTCompraC(DBGrid1).OnDblClick := DBGrid1DblClick;
end;

procedure TTCompraC.FormKeyDown(Sender: TObject; var Key: Word; Shift: TShiftState);
begin
  case Key of
    VK_ESCAPE:
      begin
        if (btnCancelar.Visible) and (btnCancelar.Enabled) then
          btnCancelar.Click;
      end;
    VK_F3:
      begin
        if (btnPesquisarC.Visible) and (btnPesquisarC.Enabled) then
          btnPesquisarC.Click;
      end;
    VK_F6:
      begin
        if (btnLimparC.Visible) and (btnLimparC.Enabled) then
          btnLimparC.Click;
      end;
    VK_F4:
      begin
        if (btnPesquisaP.Visible) and (btnPesquisaP.Enabled) then
          btnPesquisaP.Click;
      end;
    VK_F7:
      begin
        if (btnLimparP.Visible) and (btnLimparP.Enabled) then
          btnLimparP.Click;
      end;
    VK_F2:
      begin
        if (btnAdicionar.Visible) and (btnAdicionar.Enabled) then
          btnAdicionar.Click;
      end;
    VK_F8:
      begin
        if (btnExcluir.Visible) and (btnExcluir.Enabled) then
          btnExcluir.Click;
      end;
    VK_F5:
      begin
        if (btnSalvar.Visible) and (btnSalvar.Enabled) then
          btnSalvar.Click;
      end;
  end;
end;

end.

